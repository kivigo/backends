name: Go Lint

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  # Detect which modules were changed
  detect-changes:
    if: github.actor != 'dependabot[bot]'
    runs-on: ubuntu-latest
    outputs:
      main-changed: ${{ steps.changes.outputs.main }}
      backends-changed: ${{ steps.changes.outputs.backends }}
      changed-backends: ${{ steps.changes.outputs.changed-backends }}
    steps:
      - name: 🛎️ Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔍 Detect changed modules
        id: changes
        run: |
          # Get list of changed files
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            changed_files=$(git diff --name-only ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }}) || {
              echo "Failed to get diff, falling back to HEAD~1"
              changed_files=$(git diff --name-only HEAD~1 HEAD)
            }
          else
            changed_files=$(git diff --name-only HEAD~1 HEAD)
          fi
          
          echo "Changed files:"
          echo "$changed_files"
          
          # Check if main/core module changed (pkg/, root go files, go.mod/go.sum, etc.)
          main_changed="false"
          if echo "$changed_files" | grep -E "^(pkg/|go\.mod|go\.sum|[^/]*\.go)" > /dev/null; then
            main_changed="true"
            echo "✅ Main/core module files changed"
          fi
          echo "main=$main_changed" >> $GITHUB_OUTPUT
          
          # Check which backend modules changed
          backend_changed="false"
          changed_backends_list=()
          
          for backend_dir in backend/*/; do
            if [[ -d "$backend_dir" ]]; then
              backend_name=$(basename "$backend_dir")
              if echo "$changed_files" | grep -E "^${backend_dir}" > /dev/null; then
                backend_changed="true"
                changed_backends_list+=("$backend_name")
                echo "✅ Backend $backend_name files changed"
              fi
            fi
          done
          
          echo "backends=$backend_changed" >> $GITHUB_OUTPUT
          
          # Convert array to JSON for matrix
          if [ ${#changed_backends_list[@]} -gt 0 ]; then
            changed_backends_json=$(printf '%s\n' "${changed_backends_list[@]}" | jq -R . | jq -s -c .)
          else
            changed_backends_json="[]"
          fi
          echo "changed-backends=$changed_backends_json" >> $GITHUB_OUTPUT
          echo "Changed backends: $changed_backends_json"

  # Lint main package if main/core files changed
  lint-main:
    if: github.actor != 'dependabot[bot]' && needs.detect-changes.outputs.main-changed == 'true'
    runs-on: ubuntu-latest
    needs: detect-changes
    strategy:
      matrix:
        go-version: [1.23, 1.24, 1.25]
    steps:
      - name: 🛎️ Checkout code
        uses: actions/checkout@v4

      - name: 🏗️ Set up Go ${{ matrix.go-version }}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}

      - name: 📥 Install golangci-lint and run on main package
        uses: golangci/golangci-lint-action@v8
        with:
          version: latest
          working-directory: .
          args: --timeout=5m ./pkg/...

  # Lint changed backend modules only
  lint-backends:
    if: github.actor != 'dependabot[bot]' && needs.detect-changes.outputs.backends-changed == 'true' && needs.detect-changes.outputs.changed-backends != '[]'
    runs-on: ubuntu-latest
    needs: detect-changes
    strategy:
      matrix:
        backend: ${{ fromJson(needs.detect-changes.outputs.changed-backends) }}
        go-version: [1.23, 1.24, 1.25]
    steps:
      - name: 🛎️ Checkout code
        uses: actions/checkout@v4

      - name: 🏗️ Set up Go ${{ matrix.go-version }}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}

      - name: 📥 Install golangci-lint and run on ${{ matrix.backend }} backend
        uses: golangci/golangci-lint-action@v8
        with:
          version: latest
          working-directory: backend/${{ matrix.backend }}
          args: --timeout=5m

  # Generate lint summary for PR
  lint-summary:
    if: github.actor != 'dependabot[bot]' && always()
    runs-on: ubuntu-latest
    needs: [detect-changes, lint-main, lint-backends]
    steps:
      - name: 🔍 Generate lint summary
        run: |
          echo "## 🔍 Lint Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.detect-changes.outputs.main-changed }}" = "true" ]; then
            echo "### 📦 Main Package" >> $GITHUB_STEP_SUMMARY
            if [ "${{ needs.lint-main.result }}" = "success" ]; then
              echo "✅ Main package linting passed" >> $GITHUB_STEP_SUMMARY
            elif [ "${{ needs.lint-main.result }}" = "failure" ]; then
              echo "❌ Main package linting failed" >> $GITHUB_STEP_SUMMARY
            else
              echo "⏸️ Main package linting skipped" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "### 📦 Main Package" >> $GITHUB_STEP_SUMMARY
            echo "⏭️ No changes detected - linting skipped" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔌 Backend Modules" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.detect-changes.outputs.backends-changed }}" = "true" ]; then
            echo "Changed backends: ${{ needs.detect-changes.outputs.changed-backends }}" >> $GITHUB_STEP_SUMMARY
            if [ "${{ needs.lint-backends.result }}" = "success" ]; then
              echo "✅ Backend linting passed" >> $GITHUB_STEP_SUMMARY
            elif [ "${{ needs.lint-backends.result }}" = "failure" ]; then
              echo "❌ Backend linting failed" >> $GITHUB_STEP_SUMMARY
            else
              echo "⏸️ Backend linting skipped" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "⏭️ No backend changes detected - linting skipped" >> $GITHUB_STEP_SUMMARY
          fi